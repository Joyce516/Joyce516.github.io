# Two Sum
- **暴力遍历 O(N * N)**
##### 暴力搜索：对每一个元素，搜索数组中是否有元素与其相加和为目标值，时间复杂度为O(N * N)。

```
public class Solution{
    public int[] twoSum(int[] numbers, int target){
        int[] res = new int[2];
        loop:for(int i = 0; i< numbers.length-1; i++){
                for(int j = i+1; j < numbers.length; j++){
                    if(numbers[i] + numbers[j] == target){
                        res[0] = i;
                        res[1] = j;
                        break loop;             //跳出循环
                    }
                }
        }
        return res;
    }
}
```
- **HashMap O(N)**
##### HashMap：HashMap的key为元素值，value为元素下标；首先创建map,再对每一个key值，看map中是否有key值与其相加为目标值，且value值不能相同；利用空间换时间的思想，时间复杂度O(N)，空间复杂度O(N)。

```
public class Solution{
     public int[] twoSum(int[] numbers, int target){
        HashMap<integer,integer> m = new HashMap<integer,integer>();
        int[] res = new int[2];
        for(int i = 0; i < numbers.length; i++){
            m.put(numbers[i], i);
        }                                      //空间换时间
        for(int i = 0; i < numbers.length; i++){
         if(m.containsKey(target - numbers[i]) && m.get(target - numbers[i]) != i){
         res[0] = i；
         res[1] = m.get(target - numbers[i]);
         break;
         }
       }
        return res;
    }
}
```
- **双指针 O(N)**
##### 双指针：一个指针指向值较小的元素，一个指针指向值较大的元素；指向较小元素的指针从头向尾遍历，指向较大元素的指针从尾向头遍历。
```
public class Solution{
    public int[] twoSum(int[] numbers, int target){
        int i = 0;
        int j = numbers.length - 1;             //指针记录位置
        int[] res = new int[2];
        while(i < j){
            if(numbers[i] + numbers[j] == target){
                res[0] = i;
                res[1] = j;
            }else if(numbers[i] + numbers[j] > target）{
                j--;                            //指针前移
            }
            else{
                i++;                            //指针后移
            }
```

